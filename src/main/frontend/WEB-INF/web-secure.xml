<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

	<listener>
		<listener-class>org.kissweb.restServer.StartupListener</listener-class>
	</listener>

	<!--  Allow CORS on localhost for development  -->
	<filter>
		<filter-name>CorsFilter</filter-name>
		<filter-class>org.apache.catalina.filters.CorsFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>cors.allowed.origins</param-name>
			<!-- The following line is good for most situations including development and production.
			     It is set up to allow the server that comes with Kiss (port 8000) as well as
			     the IntelliJ server at port 63342.  This way you can debug the front-end within IntelliJ too.
			     However, it doesn't support testing on a remote (non-localhost or mobile) device.
			     This could be a problem when testing a mobile layout.  -->
			<param-value>http://localhost:8000,http://localhost:63342</param-value>
			<!--  Or, the following line can be used (not both).  It totally bypasses CORS and allows any origin.
			      This is fine for development purposes and for testing remote (non-localhost or mobile) devices.
			      This setting should not be used in a production environment!  It would be a serious security flaw!  -->
			<!--			<param-value>*</param-value> -->
		</init-param>
		<init-param>
			<param-name>cors.allowed.methods</param-name>
			<param-value>GET,POST,HEAD,OPTIONS,PUT</param-value>
		</init-param>
		<init-param>
			<param-name>cors.allowed.headers</param-name>
			<param-value>Content-Type,X-Requested-With,Accept,Accept-Encoding,Accept-Language,Cache-Control,Connection,Host,Pragma,Origin,Referer,User-Agent,Access-Control-Request-Method,Access-Control-Request-Headers</param-value>
		</init-param>
		<init-param>
			<param-name>cors.exposed.headers</param-name>
			<param-value>Access-Control-Allow-Origin,Content-Length,Content-Type,Date,Server,Access-Control-Allow-Credentials</param-value>
		</init-param>
		<!--
		<init-param>
			<param-name>cors.support.credentials</param-name>
			<param-value>true</param-value>
		</init-param>
		-->
	</filter>
	<filter-mapping>
		<filter-name>CorsFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

</web-app>
